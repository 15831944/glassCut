// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "gridcad.h"

/////////////////////////////////////////////////////////////////////////////
// CGridCAD

IMPLEMENT_DYNCREATE(CGridCAD, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CGridCAD properties

OLE_COLOR CGridCAD::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CGridCAD::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CGridCAD::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CGridCAD::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

short CGridCAD::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

short CGridCAD::GetNSpace()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetNSpace(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}

double CGridCAD::GetDGridSpace()
{
	double result;
	GetProperty(0x2, VT_R8, (void*)&result);
	return result;
}

void CGridCAD::SetDGridSpace(double propVal)
{
	SetProperty(0x2, VT_R8, propVal);
}

BOOL CGridCAD::GetDisplayGrid()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CGridCAD::SetDisplayGrid(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

short CGridCAD::GetNCurrGraph()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetNCurrGraph(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

long CGridCAD::GetSetCompList()
{
	long result;
	GetProperty(0x5, VT_I4, (void*)&result);
	return result;
}

void CGridCAD::SetSetCompList(long propVal)
{
	SetProperty(0x5, VT_I4, propVal);
}

short CGridCAD::GetNSignLine()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetNSignLine(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

unsigned long CGridCAD::GetClrSignLine()
{
	unsigned long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}

void CGridCAD::SetClrSignLine(unsigned long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}

unsigned long CGridCAD::GetClrRuler()
{
	unsigned long result;
	GetProperty(0x8, VT_I4, (void*)&result);
	return result;
}

void CGridCAD::SetClrRuler(unsigned long propVal)
{
	SetProperty(0x8, VT_I4, propVal);
}

short CGridCAD::GetNScrollMaxPos()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetNScrollMaxPos(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

short CGridCAD::GetNScrollMinPos()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetNScrollMinPos(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CGridCAD::GetNScrollCurrWidthPos()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetNScrollCurrWidthPos(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

short CGridCAD::GetNScrollCurrHeightPos()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetNScrollCurrHeightPos(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

unsigned long CGridCAD::GetClrSplineCurve()
{
	unsigned long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CGridCAD::SetClrSplineCurve(unsigned long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

short CGridCAD::GetNPenWidthLine()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CGridCAD::SetNPenWidthLine(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CGridCAD operations

long CGridCAD::GetGraph()
{
	long result;
	InvokeHelper(0xf, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

short CGridCAD::GetPointCounts()
{
	short result;
	InvokeHelper(0x10, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CGridCAD::GetGraphCounts()
{
	short result;
	InvokeHelper(0x11, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CGridCAD::SetArc()
{
	short result;
	InvokeHelper(0x12, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CGridCAD::DelData()
{
	InvokeHelper(0x13, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGridCAD::DelAllData()
{
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CGridCAD::SetData(double dDataX, double dDataY)
{
	short result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x15, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		dDataX, dDataY);
	return result;
}

void CGridCAD::AddGraphList()
{
	InvokeHelper(0x16, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGridCAD::DelCurrGraph()
{
	InvokeHelper(0x17, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CGridCAD::GetGraphList()
{
	long result;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

void CGridCAD::ReDraw()
{
	InvokeHelper(0x19, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGridCAD::SaveGCode(LPCTSTR strFile)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strFile);
}

void CGridCAD::SetHeadandTail(LPCTSTR strHead, LPCTSTR strTail)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strHead, strTail);
}

void CGridCAD::SetUpandDown(LPCTSTR strUp, LPCTSTR strDown)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strUp, strDown);
}

double CGridCAD::GridToParameter(BOOL dX, double dValue)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		dX, dValue);
	return result;
}

double CGridCAD::ParameterToGrid(BOOL dX, double dValue)
{
	double result;
	static BYTE parms[] =
		VTS_BOOL VTS_R8;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_R8, (void*)&result, parms,
		dX, dValue);
	return result;
}

void CGridCAD::RefreshArcInfo()
{
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

long CGridCAD::GetCurrPosition()
{
	long result;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CGridCAD::SetCurrentCurve(short iGraphCount, short iCurveCount)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		iGraphCount, iCurveCount);
	return result;
}

void CGridCAD::SetSpline(short nIndex, short nStyle)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nIndex, nStyle);
}

void CGridCAD::OpenSCRFile(LPCTSTR strOpenFileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strOpenFileName);
}

void CGridCAD::SaveSCRFile(LPCTSTR strFileName)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 strFileName);
}

void CGridCAD::SetProtectArea(short nCount)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCount);
}

void CGridCAD::ShowCutterList(long nCutterList)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nCutterList);
}

short CGridCAD::SetStringCommand(LPCTSTR strCommand)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x27, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strCommand);
	return result;
}

void CGridCAD::ReverseGraph()
{
	InvokeHelper(0x28, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGridCAD::ChangeStart()
{
	InvokeHelper(0x29, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGridCAD::PickUpBeginPos(short nStart)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nStart);
}

void CGridCAD::ListForward()
{
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGridCAD::ListBackWard()
{
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CGridCAD::SortListStart(short nStart)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nStart);
}

short CGridCAD::MovePostion(double dMoveX, double dMoveY)
{
	short result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		dMoveX, dMoveY);
	return result;
}

short CGridCAD::ZoomInOut(double dValueX, double dValueY)
{
	short result;
	static BYTE parms[] =
		VTS_R8 VTS_R8;
	InvokeHelper(0x2f, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		dValueX, dValueY);
	return result;
}

short CGridCAD::SetCheckList(short* pCheck, short nCount)
{
	short result;
	static BYTE parms[] =
		VTS_PI2 VTS_I2;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		pCheck, nCount);
	return result;
}
